import { useMemo } from "react";
import { SingleDateCBBCItem } from "./useSingleDateCBBCQuery";
import { GroupedBackendCBBC, GroupedCBBCEntry } from "@/store/groupedCBBCTypes";

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç single-date –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */
export function useSingleDateMatrixData(
  singleDateData: SingleDateCBBCItem[] | undefined
) {
  const result = useMemo(() => {
    if (!singleDateData || !Array.isArray(singleDateData)) {
      return {
        dateList: [],
        displayDateList: [],
        prevDate: undefined,
        rangeList: [],
        bullMatrix: {},
        bearMatrix: {},
        priceByDate: {},
      };
    }

    console.log("üîç [useSingleDateMatrixData] Starting processing:", {
      dataLength: singleDateData.length,
      data: singleDateData,
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º single-date –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç GroupedBackendCBBC
    const groupedData: GroupedBackendCBBC[] = singleDateData.map((item) => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º cbcc_list –≤ —Ñ–æ—Ä–º–∞—Ç GroupedCBBCEntry
      const cbccEntries: GroupedCBBCEntry[] = item.cbcc_list.map((entry) => ({
        code: entry.code.toString(),
        call_level: parseFloat(entry.range),
        quantity: entry.outstanding_quantity,
        notional: entry.calculated_notional,
        shares_number: entry.shares,
        ul_price: entry.ul_price,
        issuer: entry.issuer,
        bull_bear: entry.bull_bear,
        date: item.date,
        os_percent: parseFloat(entry.os_percent),
        last_price: parseFloat(entry.last_price),
        divisor: parseFloat(entry.divisor),
        type: "index", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ underlying
      }));

      return {
        date: item.date,
        range: item.call_level, // –ò—Å–ø–æ–ª—å–∑—É–µ–º call_level –∫–∞–∫ range
        outstanding_quantity: item.outstanding_quantity,
        calculated_notional: item.calculated_notional,
        cbcc_list: cbccEntries,
      };
    });

    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ useCBBCMatrixData
    const dates: string[] = [];
    const ranges = new Set<string>();
    const priceByDate: Record<string, number> = {};

    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    for (const row of groupedData) {
      const { date, range, cbcc_list } = row;

      ranges.add(range);
      if (!dates.includes(date)) dates.push(date);

      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∞–Ω–¥–µ—Ä–ª–∞–π–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
      if (
        !priceByDate[date] &&
        Array.isArray(cbcc_list) &&
        cbcc_list.length > 0
      ) {
        priceByDate[date] = cbcc_list[0].ul_price;
      }
    }

    const sortedDates = dates.sort((a, b) => b.localeCompare(a));

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∫–∞–∫ –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const allRanges = Array.from(ranges);
    const parsed = allRanges
      .map((r) => {
        const callLevel = parseFloat(r);
        return { key: r, from: callLevel };
      })
      .sort((a, b) => a.from - b.from);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—É—é
    const refPrice =
      sortedDates.length > 0 ? priceByDate[sortedDates[0]] ?? 30 : 30;

    console.log("üí∞ [useSingleDateMatrixData] Price analysis:", {
      refPrice,
      priceByDate,
      sortedDates,
      allRanges: parsed.map((r) => ({ range: r.key, value: r.from })),
    });

    const bear = parsed
      .filter((r) => r.from >= refPrice)
      .map((r) => r.key)
      .reverse();
    const bull = parsed
      .filter((r) => r.from < refPrice)
      .map((r) => r.key)
      .reverse();

    const sortedRanges = [...bear, ...bull];

    console.log("üìä [useSingleDateMatrixData] Range categorization:", {
      bear: bear.map((r) => ({ range: r, value: parseFloat(r) })),
      bull: bull.map((r) => ({ range: r, value: parseFloat(r) })),
      sortedRanges,
    });

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã
    const bullMatrix: Record<string, Record<string, any>> = {};
    const bearMatrix: Record<string, Record<string, any>> = {};

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—ã
    for (const range of sortedRanges) {
      bullMatrix[range] = {};
      bearMatrix[range] = {};
      for (const date of sortedDates) {
        bullMatrix[range][date] = {
          notional: 0,
          quantity: 0,
          shares: 0,
          codes: [],
          items: [],
        };
        bearMatrix[range][date] = {
          notional: 0,
          quantity: 0,
          shares: 0,
          codes: [],
          items: [],
        };
      }
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏
    for (const row of groupedData) {
      const { date, range, cbcc_list } = row;

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ cbcc_list –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π
      if (!Array.isArray(cbcc_list) || cbcc_list.length === 0) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —è—á–µ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if (
          !bullMatrix[range][date].notional &&
          !bearMatrix[range][date].notional
        ) {
          bullMatrix[range][date] = {
            notional: 0,
            quantity: 0,
            shares: 0,
            codes: [],
            items: [],
          };
          bearMatrix[range][date] = {
            notional: 0,
            quantity: 0,
            shares: 0,
            codes: [],
            items: [],
          };
        }
        continue;
      }

      // –î–∞–Ω–Ω—ã–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –≤ useDashboardData, –∏—Å–ø–æ–ª—å–∑—É–µ–º cbcc_list –∫–∞–∫ –µ—Å—Ç—å
      for (const cbcc of cbcc_list) {
        const type = cbcc.bull_bear?.trim();
        if (!type || (type !== "Bull" && type !== "Bear")) {
          console.log(
            "‚ö†Ô∏è [useSingleDateMatrixData] Skipping CBBC with invalid type:",
            {
              code: cbcc.code,
              type: cbcc.bull_bear,
              range,
              date,
            }
          );
          continue;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é —Å–µ–∫—Ü–∏—é –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω
        const rangeValue = parseFloat(range);
        const isRangeAbovePrice = rangeValue >= refPrice;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é —Å–µ–∫—Ü–∏—é –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å —ç—Ç–æ—Ç CBBC
        const isCBBCBull = type === "Bull";

        // CBBC –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –º–∞—Ç—Ä–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. Bull CBBC –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–∏–∂–µ —Ü–µ–Ω—ã (bull —Å–µ–∫—Ü–∏—è)
        // 2. Bear CBBC –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—ã—à–µ —Ü–µ–Ω—ã (bear —Å–µ–∫—Ü–∏—è)
        const shouldShowInBull = isCBBCBull && !isRangeAbovePrice;
        const shouldShowInBear = !isCBBCBull && isRangeAbovePrice;

        if (shouldShowInBull) {
          const cell = bullMatrix[range][date];
          cell.notional += cbcc.notional;
          cell.quantity += cbcc.quantity;
          cell.shares += Math.round(cbcc.shares_number * 100) / 100;
          cell.codes.push(cbcc.code.toString());
          cell.items.push({ ...cbcc, date });
        } else if (shouldShowInBear) {
          const cell = bearMatrix[range][date];
          cell.notional += cbcc.notional;
          cell.quantity += cbcc.quantity;
          cell.shares += Math.round(cbcc.shares_number * 100) / 100;
          cell.codes.push(cbcc.code.toString());
          cell.items.push({ ...cbcc, date });
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º displayDateList –∫–∞–∫ –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    let displayDateList: string[] = [];
    let prevDate: string | undefined = undefined;

    if (sortedDates.length === 0) {
      displayDateList = sortedDates;
    } else {
      const activeDate = sortedDates[0]; // –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ - –∞–∫—Ç–∏–≤–Ω–∞—è
      const previousDates = sortedDates.slice(1); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
      displayDateList = [activeDate, activeDate, ...previousDates]; // –î—É–±–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –¥–∞—Ç—É
    }

    if (sortedDates.length >= 2) {
      prevDate = sortedDates[1]; // –í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏
    const rangesWithData = new Set<string>();
    for (const range of sortedRanges) {
      for (const date of sortedDates) {
        const bullCell = bullMatrix[range]?.[date];
        const bearCell = bearMatrix[range]?.[date];

        if (
          bullCell &&
          (bullCell.notional > 0 ||
            bullCell.quantity > 0 ||
            bullCell.shares > 0)
        ) {
          rangesWithData.add(range);
        }
        if (
          bearCell &&
          (bearCell.notional > 0 ||
            bearCell.quantity > 0 ||
            bearCell.shares > 0)
        ) {
          rangesWithData.add(range);
        }
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    const filteredRanges = sortedRanges.filter((range) =>
      rangesWithData.has(range)
    );

    return {
      dateList: sortedDates,
      displayDateList,
      prevDate,
      rangeList: filteredRanges,
      bullMatrix,
      bearMatrix,
      priceByDate,
    };
  }, [singleDateData]);

  return result;
}
